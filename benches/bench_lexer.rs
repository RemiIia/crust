extern crate crust;
#[macro_use]
extern crate criterion;

use criterion::black_box;
use criterion::Criterion;

use crust::lexer;
use std::{error, fs};

fn criterion_benchmark(c: &mut Criterion) -> Result<(), Box<dyn error::Error>> {
    let input_files = &[
        "test/valid/nested_scope_2.c",
        "test/valid/consecutive_declarations.c",
        "test/valid/return_0.c",
        "test/valid/continue_empty_post.c",
        "test/valid/for_nested_scope.c",
        "test/valid/nested_break_3.c",
        "test/valid/multiple_vars.c",
        "test/valid/sub.c",
        "test/valid/mult.c",
        "test/valid/ternary.c",
        "test/valid/if_nested.c",
        "test/valid/multi_arg_2.c",
        "test/valid/combine_4.c",
        "test/valid/declare_late.c",
        "test/valid/continue.c",
        "test/valid/nested_scope.c",
        "test/valid/combine.c",
        "test/valid/else.c",
        "test/valid/while_single_statement.c",
        "test/valid/associativity_3.c",
        "test/valid/gt_true.c",
        "test/valid/combine_3.c",
        "test/valid/assign_ternary.c",
        "test/valid/fun_shadowed_by_variable.c",
        "test/valid/for_variable_shadow.c",
        "test/valid/new_precedence.c",
        "test/valid/variable_as_arg.c",
        "test/valid/nested_break_2.c",
        "test/valid/no_initialize.c",
        "test/valid/le_true.c",
        "test/valid/decl_1.c",
        "test/valid/multi_nesting.c",
        "test/valid/multiple_if.c",
        "test/valid/declare_after_block.c",
        "test/valid/nested_ops_2.c",
        "test/valid/global_shadowed.c",
        "test/valid/nested_if.c",
        "test/valid/global_array_3.c",
        "test/valid/multiple_ternary.c",
        "test/valid/nested_while.c",
        "test/valid/combine_2.c",
        "test/valid/lt_true.c",
        "test/valid/and_false.c",
        "test/valid/return_in_while.c",
        "test/valid/precedence_3.c",
        "test/valid/nested_while_2.c",
        "test/valid/gt_false.c",
        "test/valid/if_nested_2.c",
        "test/valid/for.c",
        "test/valid/nested_break.c",
        "test/valid/refer.c",
        "test/valid/assign.c",
        "test/valid/if_not_taken.c",
        "test/valid/associativity_5.c",
        "test/valid/fib.c",
        "test/valid/multi_return.c",
        "test/valid/global_array_2.c",
        "test/valid/single_arg.c",
        "test/valid/ternary_short_circuit.c",
        "test/valid/initialize.c",
        "test/valid/bitwise_zero.c",
        "test/valid/nested_for.c",
        "test/valid/ge_true.c",
        "test/valid/expression_args.c",
        "test/valid/neg.c",
        "test/valid/unop_parens.c",
        "test/valid/add.c",
        "test/valid/lt_false.c",
        "test/valid/not_five.c",
        "test/valid/multi_digit.c",
        "test/valid/if_nested_5.c",
        "test/valid/assign_val.c",
        "test/valid/nested_while_3.c",
        "test/valid/multi_arg.c",
        "test/valid/multi_arg_1.c",
        "test/valid/or_false.c",
        "test/valid/multiple_global.c",
        "test/valid/for_empty.c",
        "test/valid/no_newlines.c",
        "test/valid/nested_ternary_2.c",
        "test/valid/exp_return_val.c",
        "test/valid/eq_true.c",
        "test/valid/associativity_4.c",
        "test/valid/missing_return.c",
        "test/valid/complicated_exp.c",
        "test/valid/not_zero.c",
        "test/valid/rh_assignment.c",
        "test/valid/newlines.c",
        "test/valid/unop_add.c",
        "test/valid/ge_false.c",
        "test/valid/sub_neg.c",
        "test/valid/global_array_1.c",
        "test/valid/ne_false.c",
        "test/valid/for_decl.c",
        "test/valid/no_arg.c",
        "test/valid/nested_ternary.c",
        "test/valid/ternary_short_circuit_2.c",
        "test/valid/associativity.c",
        "test/valid/precedence_2.c",
        "test/valid/empty_expression.c",
        "test/valid/rename_function_param.c",
        "test/valid/div.c",
        "test/valid/precedence_4.c",
        "test/valid/global.c",
        "test/valid/bitwise.c",
        "test/valid/nested_ops.c",
        "test/valid/unused_exp.c",
        "test/valid/if_taken.c",
        "test/valid/mutual_recursion.c",
        "test/valid/fun_in_expr.c",
        "test/valid/ne_true.c",
        "test/valid/associativity_2.c",
        "test/valid/if_nested_4.c",
        "test/valid/global_not_initialized.c",
        "test/valid/consecutive_blocks.c",
        "test/valid/precedence.c",
        "test/valid/le_false.c",
        "test/valid/while_multi_statement.c",
        "test/valid/spaces.c",
        "test/valid/declare_block.c",
        "test/valid/break.c",
        "test/valid/bubble_sort.c",
        "test/valid/and_true.c",
        "test/valid/or_true.c",
        "test/valid/do_while.c",
        "test/valid/return_2.c",
        "test/valid/parens.c",
        "test/valid/if_nested_3.c",
        "test/valid/eq_false.c",
    ];
    for input_file in input_files.iter() {
        c.bench_function(&format!("lex {}", input_file), move |b| {
            b.iter(|| lexer::lex(black_box(&fs::read_to_string(input_file).unwrap())))
        });
    }
    return Ok(());
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
